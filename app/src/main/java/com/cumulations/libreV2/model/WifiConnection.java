package com.cumulations.libreV2.model;import android.content.Context;import android.util.Log;import com.libre.qactive.Scanning.Constants;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;public class WifiConnection {    public String mPreviousSSID = "";    private static WifiConnection instance = new WifiConnection();    protected WifiConnection() {        // Exists only to defeat instantiation.    }    public static WifiConnection getInstance() {        if(instance == null) {            instance = new WifiConnection();        }        return instance;    }    public void setPreviousSSID(String mSSID){        mPreviousSSID = mSSID;    }    public String getPreviousSSID(){        return mPreviousSSID;    }    public String getMainSSID() {        return mainSSID;    }    public boolean mSACDevicePostDone = false;    public void setmSACDevicePostDone(boolean mStatus){        this.mSACDevicePostDone = mStatus;    }    public boolean getmSACDevicePostDone(){        return mSACDevicePostDone;    }    public void setMainSSID(String mainSSID) {        this.mainSSID = mainSSID;    }    public String getMainSSIDPwd() {        return mainSSIDPwd;    }    public void setMainSSIDPwd(String mainSSIDPwd) {        this.mainSSIDPwd = mainSSIDPwd;    }    public String getMainSSIDSec() {        return mainSSIDSec;    }    public String getKeyIndexForWEP() {        return keyIndexForWEP;    }    public void setKeyIndexForWEP(String keyIndexForWEP) {        this.keyIndexForWEP = keyIndexForWEP;    }    public String keyIndexForWEP = "";    public void setMainSSIDSec(String mainSSIDSec) {        this.mainSSIDSec = mainSSIDSec;    }    public void setMainSSIDDetails(String ssid,String password,String security){        this.mainSSID=ssid;        this.mainSSIDPwd=password;        this.mainSSIDSec=security;    }    public HashMap<String,String> ssidDeviceNameSAC= new HashMap<String,String>();    public void putssidDeviceNameSAC(String key,String value){        ssidDeviceNameSAC.put(key,value);    }    public void clearssidDeviceNameSAC(){        ssidDeviceNameSAC.clear();    }    public String getssidDeviceNameSAC(String key){        return ssidDeviceNameSAC.get(key);    }    public String mainSSID = "";    public String mainSSIDPwd="";    public String mainSSIDSec="";    public boolean mSendWifiData = false;    public String TAG="WifiConnection";    public static Context ctx;    public List<String> mSACDevicesList = new ArrayList<String>() ;    public LinkedHashMap<String,String> WifiScanSSIDSecurityMap = new LinkedHashMap<String,String>();    public String getWifiScanResutSecurity(String key){            return WifiScanSSIDSecurityMap.get(key);    }    public String getSSIDForSending(String cap){        if(cap!=null) {           /* if (cap.contains("WEP")) {                return "WEP";            } else */            if (cap.contains("WPA")) {                //Security.add("WPA-PSK");                return "WPA-PSK";            } else {                return "NONE";            }        }return "";    }    public void putWifiScanResultSecurity(String key,String value){        /**ignoring wep*/        if (value != null && (value.contains("WEP") || value.contains("wep"))) {            Log.d("SecurityIssue", "ignoring WEP-- " + key);        } else {            WifiScanSSIDSecurityMap.put(key, value);        }    }    public void clearWifiScanResult(){        WifiScanSSIDSecurityMap.clear();    }    public String[] getAllSSIDs(){        String tArray[] = WifiScanSSIDSecurityMap.keySet().toArray(new String[0]);        return tArray;    }    public String[] getAllSSIDList(){        return WifiScanSSIDSecurityMap.keySet().toArray(new String[0]);    }    public ArrayList<String> getFilteredSSIDsArrayList(){        String tArray[] = WifiScanSSIDSecurityMap.keySet().toArray(new String[0]);        ArrayList<String> mylist = new ArrayList<String>();        for(int i=0,j=0;i<tArray.length;i++){            if(! tArray[i].toLowerCase().contains(Constants.WAC_SSID.toLowerCase()))                mylist.add(tArray[i]);        }        return mylist;    }    public String[] getFilteredSSIDs(){        String tArray[] = WifiScanSSIDSecurityMap.keySet().toArray(new String[0]);        ArrayList<String> mylist = new ArrayList<String>();        for(int i=0,j=0;i<tArray.length;i++){            if(! tArray[i].toLowerCase().contains(Constants.RIVAA_WAC_SSID.toLowerCase()))                mylist.add(tArray[i]);        }        return mylist.toArray(new String[0]);    }    public WifiConnection(Context ctx){        ctx=ctx;    }    public int addSacDevices(String mSacDevice){        if(!mSACDevicesList.contains(mSacDevice))            mSACDevicesList.add(mSacDevice);        return mSACDevicesList.size();    }    public String[] getAllSacDevice(){        String tArray[] = mSACDevicesList.toArray(new String[0]);        return tArray;    }    public  List<String> getAllSacDeviceList(){        return mSACDevicesList;    }    public String getSacDevice(int mPosition){        return mSACDevicesList.get(mPosition);    }    public int clearSacDevices(){        mSACDevicesList.clear();        return mSACDevicesList.size();    }    public List<ScanResultItem> getSavedScanResults(){        ArrayList<ScanResultItem> items = new ArrayList<>();        for (Map.Entry<String,String> entry : WifiScanSSIDSecurityMap.entrySet()){            if (!entry.getValue().contains(Constants.RIVAA_WAC_SSID)){                ScanResultItem item = new ScanResultItem();                item.setSsid(entry.getKey());                item.setSecurity(entry.getValue());                items.add(item);            }        }        return items;    }}